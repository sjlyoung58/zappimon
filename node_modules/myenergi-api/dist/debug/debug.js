"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = require("process");
const src_1 = require("../src");
const dotenv = __importStar(require("dotenv"));
dotenv.config();
function timeout(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
const runner = (iterations) => new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
    const myenergi = new src_1.MyEnergi(process.env.USERNAME, process.env.PASSWORD, 'https://s18.myenergi.net');
    for (let index = 0; index < iterations; index++) {
        try {
            console.log(`Iteration: ${index + 1}`);
            const statusAll = yield myenergi.getStatusAll();
            console.log(statusAll);
            yield timeout(15000);
        }
        catch (error) {
            reject(error);
        }
    }
    resolve("OK");
}));
runner(10000).then((x) => {
    console.log(x);
    (0, process_1.exit)();
}).catch(console.error);
